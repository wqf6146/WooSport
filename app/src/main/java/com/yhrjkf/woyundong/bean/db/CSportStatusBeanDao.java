package com.yhrjkf.woyundong.bean.db;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "CSPORT_STATUS_BEAN".
*/
public class CSportStatusBeanDao extends AbstractDao<CSportStatusBean, Long> {

    public static final String TABLENAME = "CSPORT_STATUS_BEAN";

    /**
     * Properties of entity CSportStatusBean.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property BVoiceSports = new Property(1, boolean.class, "bVoiceSports", false, "B_VOICE_SPORTS");
        public final static Property BVoiceDistance = new Property(2, boolean.class, "bVoiceDistance", false, "B_VOICE_DISTANCE");
        public final static Property BVoiceTime = new Property(3, boolean.class, "bVoiceTime", false, "B_VOICE_TIME");
        public final static Property BVoiceSpeed = new Property(4, boolean.class, "bVoiceSpeed", false, "B_VOICE_SPEED");
        public final static Property MStrReportStatus = new Property(5, String.class, "mStrReportStatus", false, "M_STR_REPORT_STATUS");
        public final static Property MDistance = new Property(6, String.class, "mDistance", false, "M_DISTANCE");
        public final static Property MTime = new Property(7, String.class, "mTime", false, "M_TIME");
        public final static Property BAutoPause = new Property(8, boolean.class, "bAutoPause", false, "B_AUTO_PAUSE");
    }


    public CSportStatusBeanDao(DaoConfig config) {
        super(config);
    }
    
    public CSportStatusBeanDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"CSPORT_STATUS_BEAN\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"B_VOICE_SPORTS\" INTEGER NOT NULL ," + // 1: bVoiceSports
                "\"B_VOICE_DISTANCE\" INTEGER NOT NULL ," + // 2: bVoiceDistance
                "\"B_VOICE_TIME\" INTEGER NOT NULL ," + // 3: bVoiceTime
                "\"B_VOICE_SPEED\" INTEGER NOT NULL ," + // 4: bVoiceSpeed
                "\"M_STR_REPORT_STATUS\" TEXT," + // 5: mStrReportStatus
                "\"M_DISTANCE\" TEXT," + // 6: mDistance
                "\"M_TIME\" TEXT," + // 7: mTime
                "\"B_AUTO_PAUSE\" INTEGER NOT NULL );"); // 8: bAutoPause
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"CSPORT_STATUS_BEAN\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, CSportStatusBean entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getBVoiceSports() ? 1L: 0L);
        stmt.bindLong(3, entity.getBVoiceDistance() ? 1L: 0L);
        stmt.bindLong(4, entity.getBVoiceTime() ? 1L: 0L);
        stmt.bindLong(5, entity.getBVoiceSpeed() ? 1L: 0L);
 
        String mStrReportStatus = entity.getMStrReportStatus();
        if (mStrReportStatus != null) {
            stmt.bindString(6, mStrReportStatus);
        }
 
        String mDistance = entity.getMDistance();
        if (mDistance != null) {
            stmt.bindString(7, mDistance);
        }
 
        String mTime = entity.getMTime();
        if (mTime != null) {
            stmt.bindString(8, mTime);
        }
        stmt.bindLong(9, entity.getBAutoPause() ? 1L: 0L);
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, CSportStatusBean entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getBVoiceSports() ? 1L: 0L);
        stmt.bindLong(3, entity.getBVoiceDistance() ? 1L: 0L);
        stmt.bindLong(4, entity.getBVoiceTime() ? 1L: 0L);
        stmt.bindLong(5, entity.getBVoiceSpeed() ? 1L: 0L);
 
        String mStrReportStatus = entity.getMStrReportStatus();
        if (mStrReportStatus != null) {
            stmt.bindString(6, mStrReportStatus);
        }
 
        String mDistance = entity.getMDistance();
        if (mDistance != null) {
            stmt.bindString(7, mDistance);
        }
 
        String mTime = entity.getMTime();
        if (mTime != null) {
            stmt.bindString(8, mTime);
        }
        stmt.bindLong(9, entity.getBAutoPause() ? 1L: 0L);
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public CSportStatusBean readEntity(Cursor cursor, int offset) {
        CSportStatusBean entity = new CSportStatusBean( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getShort(offset + 1) != 0, // bVoiceSports
            cursor.getShort(offset + 2) != 0, // bVoiceDistance
            cursor.getShort(offset + 3) != 0, // bVoiceTime
            cursor.getShort(offset + 4) != 0, // bVoiceSpeed
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // mStrReportStatus
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // mDistance
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // mTime
            cursor.getShort(offset + 8) != 0 // bAutoPause
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, CSportStatusBean entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setBVoiceSports(cursor.getShort(offset + 1) != 0);
        entity.setBVoiceDistance(cursor.getShort(offset + 2) != 0);
        entity.setBVoiceTime(cursor.getShort(offset + 3) != 0);
        entity.setBVoiceSpeed(cursor.getShort(offset + 4) != 0);
        entity.setMStrReportStatus(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setMDistance(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setMTime(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setBAutoPause(cursor.getShort(offset + 8) != 0);
     }
    
    @Override
    protected final Long updateKeyAfterInsert(CSportStatusBean entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(CSportStatusBean entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(CSportStatusBean entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
