package com.yhrjkf.woyundong.bean.db;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "CSPORT_INFO_BEAN".
*/
public class CSportInfoBeanDao extends AbstractDao<CSportInfoBean, Long> {

    public static final String TABLENAME = "CSPORT_INFO_BEAN";

    /**
     * Properties of entity CSportInfoBean.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Types = new Property(1, String.class, "types", false, "TYPES");
        public final static Property Distance = new Property(2, Double.class, "distance", false, "DISTANCE");
        public final static Property Calorie = new Property(3, Double.class, "calorie", false, "CALORIE");
        public final static Property Calorie_unit = new Property(4, int.class, "calorie_unit", false, "CALORIE_UNIT");
        public final static Property Speed = new Property(5, Double.class, "speed", false, "SPEED");
        public final static Property Start_time = new Property(6, String.class, "start_time", false, "START_TIME");
        public final static Property Finish_time = new Property(7, String.class, "finish_time", false, "FINISH_TIME");
        public final static Property Time = new Property(8, String.class, "time", false, "TIME");
        public final static Property Path = new Property(9, String.class, "path", false, "PATH");
    }


    public CSportInfoBeanDao(DaoConfig config) {
        super(config);
    }
    
    public CSportInfoBeanDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"CSPORT_INFO_BEAN\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"TYPES\" TEXT," + // 1: types
                "\"DISTANCE\" REAL," + // 2: distance
                "\"CALORIE\" REAL," + // 3: calorie
                "\"CALORIE_UNIT\" INTEGER NOT NULL ," + // 4: calorie_unit
                "\"SPEED\" REAL," + // 5: speed
                "\"START_TIME\" TEXT," + // 6: start_time
                "\"FINISH_TIME\" TEXT," + // 7: finish_time
                "\"TIME\" TEXT," + // 8: time
                "\"PATH\" TEXT);"); // 9: path
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"CSPORT_INFO_BEAN\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, CSportInfoBean entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String types = entity.getTypes();
        if (types != null) {
            stmt.bindString(2, types);
        }
 
        Double distance = entity.getDistance();
        if (distance != null) {
            stmt.bindDouble(3, distance);
        }
 
        Double calorie = entity.getCalorie();
        if (calorie != null) {
            stmt.bindDouble(4, calorie);
        }
        stmt.bindLong(5, entity.getCalorie_unit());
 
        Double speed = entity.getSpeed();
        if (speed != null) {
            stmt.bindDouble(6, speed);
        }
 
        String start_time = entity.getStart_time();
        if (start_time != null) {
            stmt.bindString(7, start_time);
        }
 
        String finish_time = entity.getFinish_time();
        if (finish_time != null) {
            stmt.bindString(8, finish_time);
        }
 
        String time = entity.getTime();
        if (time != null) {
            stmt.bindString(9, time);
        }
 
        String path = entity.getPath();
        if (path != null) {
            stmt.bindString(10, path);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, CSportInfoBean entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String types = entity.getTypes();
        if (types != null) {
            stmt.bindString(2, types);
        }
 
        Double distance = entity.getDistance();
        if (distance != null) {
            stmt.bindDouble(3, distance);
        }
 
        Double calorie = entity.getCalorie();
        if (calorie != null) {
            stmt.bindDouble(4, calorie);
        }
        stmt.bindLong(5, entity.getCalorie_unit());
 
        Double speed = entity.getSpeed();
        if (speed != null) {
            stmt.bindDouble(6, speed);
        }
 
        String start_time = entity.getStart_time();
        if (start_time != null) {
            stmt.bindString(7, start_time);
        }
 
        String finish_time = entity.getFinish_time();
        if (finish_time != null) {
            stmt.bindString(8, finish_time);
        }
 
        String time = entity.getTime();
        if (time != null) {
            stmt.bindString(9, time);
        }
 
        String path = entity.getPath();
        if (path != null) {
            stmt.bindString(10, path);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public CSportInfoBean readEntity(Cursor cursor, int offset) {
        CSportInfoBean entity = new CSportInfoBean( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // types
            cursor.isNull(offset + 2) ? null : cursor.getDouble(offset + 2), // distance
            cursor.isNull(offset + 3) ? null : cursor.getDouble(offset + 3), // calorie
            cursor.getInt(offset + 4), // calorie_unit
            cursor.isNull(offset + 5) ? null : cursor.getDouble(offset + 5), // speed
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // start_time
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // finish_time
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // time
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9) // path
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, CSportInfoBean entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setTypes(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setDistance(cursor.isNull(offset + 2) ? null : cursor.getDouble(offset + 2));
        entity.setCalorie(cursor.isNull(offset + 3) ? null : cursor.getDouble(offset + 3));
        entity.setCalorie_unit(cursor.getInt(offset + 4));
        entity.setSpeed(cursor.isNull(offset + 5) ? null : cursor.getDouble(offset + 5));
        entity.setStart_time(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setFinish_time(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setTime(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setPath(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(CSportInfoBean entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(CSportInfoBean entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(CSportInfoBean entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
