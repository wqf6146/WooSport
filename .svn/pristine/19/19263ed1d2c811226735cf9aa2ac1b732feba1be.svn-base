package com.yhrjkf.woyundong.activity;

import java.util.ArrayList;
import java.util.List;

import org.json.JSONArray;
import org.json.JSONException;
import org.json.JSONObject;

import android.app.Activity;
import android.content.Intent;
import android.graphics.BitmapFactory;
import android.graphics.Color;
import android.os.Bundle;
import android.os.Handler;
import android.os.Message;
import android.util.Log;
import android.view.View;
import android.view.View.OnClickListener;
import android.widget.LinearLayout;

import com.amap.api.maps2d.AMap;
import com.amap.api.maps2d.CameraUpdateFactory;
import com.amap.api.maps2d.MapView;
import com.amap.api.maps2d.model.BitmapDescriptorFactory;
import com.amap.api.maps2d.model.CameraPosition;
import com.amap.api.maps2d.model.LatLng;
import com.amap.api.maps2d.model.MarkerOptions;
import com.amap.api.maps2d.model.Polyline;
import com.amap.api.maps2d.model.PolylineOptions;
import com.lidroid.xutils.HttpUtils;
import com.lidroid.xutils.exception.HttpException;
import com.lidroid.xutils.http.RequestParams;
import com.lidroid.xutils.http.ResponseInfo;
import com.lidroid.xutils.http.callback.RequestCallBack;
import com.lidroid.xutils.http.client.HttpRequest.HttpMethod;
import com.vise.log.ViseLog;
import com.vise.xsnow.net.callback.ApiCallback;
import com.vise.xsnow.net.exception.ApiException;
import com.vise.xsnow.net.mode.CacheResult;
import com.yhrjkf.woyundong.R;
import com.yhrjkf.woyundong.bean.MapPointBean;
import com.yhrjkf.woyundong.http.WooSportApi;
import com.yhrjkf.woyundong.tools.AppConfig;

public class HistoryMapActivity extends Activity implements OnClickListener {
	private MapView mMapView = null;
	private Intent intent;
	private String mid;
//	private List<LatLng> coordList;
	private List<MapPointBean.DataBean> mPointList;
	private PolylineOptions polylineOptions;
	private AMap aMap;
	Bundle savedInstanceState;
	private double latitude, longitude;
	private LinearLayout ll_back;
	private int a = 0;
	private Handler handler;
	private Polyline polyline;
	private Boolean kg = true;
	private Thread thread;
	private String Recode;
	private Boolean xcKg = false;

	@Override
	protected void onCreate(Bundle savedInstanceState) {
		// TODO Auto-generated method stub
		super.onCreate(savedInstanceState);
		if ((getIntent().getFlags() & Intent.FLAG_ACTIVITY_BROUGHT_TO_FRONT) != 0) {
			finish();
			return;
		}
		setContentView(R.layout.activity_historymap);
		ll_back = (LinearLayout) findViewById(R.id.ll_back);
		ll_back.setOnClickListener(this);
		mMapView = (MapView) findViewById(R.id.map);
		mMapView.onCreate(savedInstanceState);
		if (aMap == null) {
			aMap = mMapView.getMap();
		}
		handler = new Handler() {
			@Override
			public void handleMessage(Message msg) {
				super.handleMessage(msg);
				if (msg.arg2 == 0 && kg == true) {
					Log.i("sendable", "sendable");
					kg = false;
					if (!(Recode.equals("403"))) {
						thread = new Thread(sendable);
						thread.start();
						xcKg = true;
					}
				} else if (msg.arg1 == 0) {
					int position = msg.arg1;
//					if (mPointList.size() <= position)
//						position = mPointList.size()-1;
//					if (position<0)
//						position=0;
					polylineOptions.add(new LatLng(Double.parseDouble(mPointList.get(position).getLatitude()),
							Double.parseDouble(mPointList.get(position).getLongitude())));
					polyline = aMap.addPolyline(polylineOptions.geodesic(true)
							.color(Color.RED));
				} else {
					int position = msg.arg1;
//					if (mPointList.size() <= position)
//						position = mPointList.size()-1;
//					if (position<0)
//						position=0;
					polyline.remove();
					polylineOptions.add(new LatLng(Double.parseDouble(mPointList.get(position).getLatitude()),
							Double.parseDouble(mPointList.get(position).getLongitude())));
					polyline = aMap.addPolyline(polylineOptions.geodesic(true)
							.color(Color.RED));
				}

			}
		};

		intent = getIntent();
		mid = String.valueOf(intent.getIntExtra("mid",0));
		getData();
	}

	@Override
	protected void onDestroy() {
		// TODO Auto-generated method stub
		super.onDestroy();
		mMapView.onDestroy();
		if (xcKg) {
			thread.interrupt();
		}
	}

	@Override
	protected void onResume() {
		// TODO Auto-generated method stub
		super.onResume();
		mMapView.onResume();
	}

	@Override
	protected void onPause() {
		// TODO Auto-generated method stub
		super.onPause();
		mMapView.onPause();
	}

	@Override
	protected void onSaveInstanceState(Bundle outState) {
		// TODO Auto-generated method stub
		super.onSaveInstanceState(outState);
		mMapView.onSaveInstanceState(outState);
	}

	public void getData() {

		WooSportApi.getInstance().startGetSportPoint(this, mid, new ApiCallback<CacheResult<MapPointBean>>() {
			@Override
			public void onStart() {

			}

			@Override
			public void onError(ApiException e) {
				ViseLog.e(e);
			}

			@Override
			public void onCompleted() {

			}

			@Override
			public void onNext(CacheResult<MapPointBean> mapPointBeanCacheResult) {
				if (mapPointBeanCacheResult==null)
					return;
				mPointList = mapPointBeanCacheResult.getCacheData().getData();
				polylineOptions = new PolylineOptions();
				aMap.moveCamera(CameraUpdateFactory
						.newCameraPosition(new CameraPosition(
								new LatLng(Double.parseDouble(mPointList.get(0).getLatitude()),
										Double.parseDouble(mPointList.get(0).getLongitude())),// 新的中心点坐标
								17, // 新的缩放级别
								30, // 俯仰角0°~45°（垂直与地图时为0）
								0 // //偏航角 0~360° (正北方为0)
						)));
				setMarker();
				Log.i("sendable", "sendable");
				kg = false;
				if (!(mapPointBeanCacheResult.getCacheData().getRecode().equals("403"))) {
					thread = new Thread(sendable);
					thread.start();
					xcKg = true;
				}
			}
		});

//		HttpUtils httpUtils = new HttpUtils();
//		RequestParams params = new RequestParams("UTF-8");
//		params.addBodyParameter("mid", mid);
//		httpUtils.send(HttpMethod.POST, AppConfig.HISTORYMAP, params,
//				new RequestCallBack<String>() {
//
//					@Override
//					public void onFailure(HttpException arg0, String arg1) {
//						// TODO Auto-generated method stub
//						Log.i("HttpException", arg1);
//					}
//
//					@Override
//					public void onSuccess(ResponseInfo<String> responseInfo) {
//						// TODO Auto-generated method stub
//						Log.i("result", responseInfo.result);
//						coordList = new ArrayList<LatLng>();
//						polylineOptions = new PolylineOptions();
//						try {
//							JSONObject jsonObject = new JSONObject(
//									responseInfo.result);
//							JSONArray jsonArray = jsonObject
//									.getJSONArray("Data");
//							Recode = jsonObject.getString("Recode");
//							for (int i = 0; i < jsonArray.length(); i++) {
//								JSONObject jsonObject2 = jsonArray
//										.getJSONObject(i);
//								latitude = Double.parseDouble(jsonObject2
//										.getString("latitude"));
//								longitude = Double.parseDouble(jsonObject2
//										.getString("longitude"));
//
//								coordList.add(new LatLng(latitude, longitude));
//								// polylineOptions.add(new LatLng(latitude,
//								// longitude));
//							}
//							aMap.moveCamera(CameraUpdateFactory
//									.newCameraPosition(new CameraPosition(
//											coordList.get(0),// 新的中心点坐标
//											15, // 新的缩放级别
//											30, // 俯仰角0°~45°（垂直与地图时为0）
//											0 // //偏航角 0~360° (正北方为0)
//									)));
//							// aMap.addPolyline(polylineOptions.geodesic(true)
//							// .color(Color.RED));// 地图画线
//							setMarker();
//							Message message = new Message();
//							message.arg2 = 0;
//							handler.sendMessage(message);
//
//						} catch (JSONException e) {
//							// TODO Auto-generated catch block
//							e.printStackTrace();
//						}
//					}
//
//				});
	}

	/**
	 * 画标示
	 */
	private void setMarker() {
		// TODO Auto-generated method stub
		MarkerOptions markerOption = new MarkerOptions();
		markerOption.position(new LatLng(Double.parseDouble(mPointList.get(0).getLatitude()),
				Double.parseDouble(mPointList.get(0).getLongitude())));
		markerOption.icon(BitmapDescriptorFactory.fromBitmap(BitmapFactory
				.decodeResource(getResources(), R.drawable.mstart)));

		MarkerOptions markerOption2 = new MarkerOptions();
		markerOption2.position(new LatLng(Double.parseDouble(mPointList.get(mPointList.size()-1).getLatitude()),
				Double.parseDouble(mPointList.get(mPointList.size()-1).getLongitude())));
		markerOption2.icon(BitmapDescriptorFactory.fromBitmap(BitmapFactory
				.decodeResource(getResources(), R.drawable.mend)));
		aMap.addMarker(markerOption);
		aMap.addMarker(markerOption2);

	}

	@Override
	public void onClick(View v) {
		// TODO Auto-generated method stub
		switch (v.getId()) {
		case R.id.ll_back:
			finish();
			break;
		default:
			break;
		}

	}

	Runnable sendable = new Runnable() {

		@Override
		public void run() {
			// TODO Auto-generated method stub
			Log.i("size", mPointList.size() + "");
			for (int i = 0; i < mPointList.size(); i++) {
				try {
					if (mPointList.size() < 500) {
						Thread.sleep(30);
					} else if (mPointList.size() < 2000) {
						Thread.sleep(10);
					} else if (mPointList.size() > 1999) {
						Thread.sleep(1);
					}

					Message message = new Message();
					message.arg1 = a;
					handler.sendMessage(message);
					a++;
				} catch (InterruptedException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}

			}

		}
	};

}
