package com.yhrjkf.woyundong;

import android.app.Application;
import android.graphics.Bitmap;
import android.graphics.drawable.Drawable;

import com.amap.api.location.AMapLocation;
import com.baidu.apistore.sdk.ApiStoreSDK;
import com.nostra13.universalimageloader.cache.disc.naming.Md5FileNameGenerator;
import com.nostra13.universalimageloader.core.DisplayImageOptions;
import com.nostra13.universalimageloader.core.ImageLoader;
import com.nostra13.universalimageloader.core.ImageLoaderConfiguration;
import com.nostra13.universalimageloader.core.assist.QueueProcessingType;
import com.vise.xsnow.ViseApplication;
import com.vise.xsnow.cache.SpCache;
import com.vise.xsnow.net.callback.ApiCallback;
import com.vise.xsnow.net.exception.ApiException;
import com.yhrjkf.woyundong.R;
import com.yhrjkf.woyundong.bean.LoginBean;
import com.yhrjkf.woyundong.http.WooSportApi;
import com.yhrjkf.woyundong.utils.SharedPreferencesUtil;
import com.yhrjkf.woyundong.utils.WooConfig;

/**
 * App
 * 
 * @author minking
 */
public class App extends ViseApplication {
	private static App mApp;
	private static LoginBean.UserBean mUserBean;

	public static String LOGINBEAN = "LOGINBEAN";

	public static App newInstance(){
		return mApp;
	}

	private Bitmap mUserBitmap;

	//语音提示
	private Boolean mVoiceTip=true;
	private AMapLocation mAMapLocation;

	@Override
	public void onCreate() {
		ApiStoreSDK.init(this, "fae9ac66394790e46f50de4a26dbcbc7");
		// 初始化ImageLoader
		@SuppressWarnings("deprecation")
		DisplayImageOptions options = new DisplayImageOptions.Builder()
				.showStubImage(R.drawable.icon_stub) // 设置图片下载期间显示的图片
				.showImageForEmptyUri(R.drawable.icon_empty) // 设置图片Uri为空或是错误的时候显示的图片
				.showImageOnFail(R.drawable.icon_error) // 设置图片加载或解码过程中发生错误显示的图片
				.cacheInMemory(true) // 设置下载的图片是否缓存在内存中
				.cacheOnDisc(true) // 设置下载的图片是否缓存在SD卡中
				// .displayer(new RoundedBitmapDisplayer(20)) // 设置成圆角图片
				.build(); // 创建配置过得DisplayImageOption对象

		ImageLoaderConfiguration config = new ImageLoaderConfiguration.Builder(
				getApplicationContext()).defaultDisplayImageOptions(options)
				.threadPriority(Thread.NORM_PRIORITY - 2)
				.denyCacheImageMultipleSizesInMemory()
				.discCacheFileNameGenerator(new Md5FileNameGenerator())
				.tasksProcessingOrder(QueueProcessingType.LIFO).build();
		ImageLoader.getInstance().init(config);
		ApiStoreSDK.init(this, "fae9ac66394790e46f50de4a26dbcbc7");
		super.onCreate();
		mApp = this;
	}

	public Bitmap getUserDrawable(){
		return mUserBitmap;
	}

	public void setUserDrawable(Bitmap bitmap){
		mUserBitmap = bitmap;
	}

//	public void saveUserInfo(LoginBean bean){
//		mUserBean = bean;
//	}

//	public LoginBean getmUserBean() {
//		return mUserBean;
//	}

	public void setVoiceTip(Boolean voiceTip){
		mVoiceTip = voiceTip;
	}

	public Boolean getVoiceTip(){
		return mVoiceTip;
	}

	public void saveUserBean(LoginBean loginBean){
		final SpCache spCache = new SpCache(this, WooConfig.USER.USER_FILE);
		spCache.put(WooConfig.USER.LOGINBEAN,loginBean);
		mUserBean = loginBean.getData();
	}

	public LoginBean.UserBean getUserBean(){
        if (mUserBean!=null)
            return mUserBean;
		final SpCache spCache = new SpCache(this, WooConfig.USER.USER_FILE);
		LoginBean loginBean= (LoginBean)spCache.get(WooConfig.USER.LOGINBEAN);
		if (loginBean == null){
			WooSportApi.getInstance().startUpdateUser(this, new ApiCallback<LoginBean>() {
				@Override
				public void onStart() {

				}

				@Override
				public void onError(ApiException e) {

				}

				@Override
				public void onCompleted() {

				}

				@Override
				public void onNext(LoginBean loginBean) {
					spCache.put(WooConfig.USER.LOGINBEAN,loginBean);
                    mUserBean = loginBean.getData();
				}
			});
		}else{
            mUserBean = loginBean.getData();
			return mUserBean;
		}
		return null;
	}

	public void setAmapLocation(AMapLocation mapLocation){
		mAMapLocation = mapLocation;
	}

	public AMapLocation getAMapLocation() {
		return mAMapLocation;
	}
}
