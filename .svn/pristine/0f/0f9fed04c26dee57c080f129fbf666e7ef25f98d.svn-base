package com.yhrjkf.woyundong.service;

import android.app.Notification;
import android.app.NotificationManager;
import android.app.PendingIntent;
import android.app.Service;
import android.content.ComponentName;
import android.content.Context;
import android.content.Intent;
import android.content.SharedPreferences;
import android.os.Binder;
import android.os.Bundle;
import android.os.IBinder;
import android.support.annotation.Nullable;
import android.support.v4.content.LocalBroadcastManager;
import android.util.Log;

import com.amap.api.location.AMapLocation;
import com.amap.api.location.AMapLocationClient;
import com.amap.api.location.AMapLocationClientOption;
import com.amap.api.location.AMapLocationListener;
import com.amap.api.maps2d.AMapUtils;
import com.amap.api.maps2d.model.LatLng;
import com.google.gson.Gson;
import com.google.gson.reflect.TypeToken;
import com.vise.log.ViseLog;
import com.yhrjkf.woyundong.R;
import com.yhrjkf.woyundong.activity.LaunchActivity;
import com.yhrjkf.woyundong.bean.CSportInfoBean;
import com.yhrjkf.woyundong.tools.DataUtils;
import com.yhrjkf.woyundong.utils.SharedPreferencesUtil;

import java.lang.reflect.Type;
import java.math.BigDecimal;
import java.util.Timer;
import java.util.TimerTask;
import java.util.Vector;

import fit.Fit;

/**
 * Created by Administrator on 2017/3/6.
 */

public class MapService extends Service  implements AMapLocationListener {

    public static String TAG = MapService.class.getName();
    public static String MAPLOCATION = "MAPLOCATION";
    public static String MAPINFO = "MAPINFO";
    private AMapLocationClient mlocationClient;
    private AMapLocationClientOption mLocationOption;

    private Vector<LatLng> mLatLngVector;
//    private LinkedList<LatLng> mLatLngList;
    private static String TEMP_LIST= "TEMP_LIST";
    private static String TEMP_OBJECT= "TEMP_OBJECT";

    public static String SPEED_SLOW = "SPEEDSLOW";
    public static String SPEED_OVER = "SPEEDOVER";
    public static String ROAD_BLOCK = "ROADBLOCK";
    public static String SYN_POINTLIST = "SYN_POINTLIST";
    public static String SYN_TIME = "SYNTIME";
    public static String WEATHERSERVICE = "WeatherService";
    public static String WEATHER = "weather";

    private static final String FILE_NAME = "WooSports";
    private static final String WALK = "跑步";
    private static final String RIDING = "骑行";

    private int TAG_SLOW = 20;

    public static int TYPE_RUN = 0x1;
    public static int TYPE_RIDE = 0x2;

    private int mSportType;

    //运动信息
    private CSportInfoBean mSportBean;

    //是否在运动
    private boolean mSporting = false;

    //慢速tag
    private int speedOver = 0;
    //超速tag
    private int speedSLow = 0;

    //路障
    private int roadblock = 1000;


    private boolean bResurgence = false;

    LocalBroadcastManager mLbm;

    //定时
    private Timer mTimer;
    private int mValue = 0;//计时

    //天气标志位
    private boolean mWeatherService = false;

    private LatLng mOldPoint,mNewPoint;

    private void timeRun(){
        if (mTimer!=null)
            mTimer.cancel();
        mTimer = new Timer();
        mTimer.schedule(new TimerTask() {
            @Override
            public void run() {
                mValue++;
                Intent intent = new Intent(TAG);
                intent.putExtra(SYN_TIME,mValue);
                LocalBroadcastManager.getInstance(MapService.this).sendBroadcast(intent);
            }
        },1000,1000);
    }

    @Nullable
    @Override
    public IBinder onBind(Intent intent) {
//        initMap();
        mLbm = LocalBroadcastManager.getInstance(this);
        return new MapBinder();
    }

    @Override
    public void onCreate() {
        super.onCreate();
        Log.e(TAG,"onCreate");
        //正常流程
        initMap();
        //重启流程
    }

    @Override
    public int onStartCommand(Intent intent, int flags, int startId) {
        Log.e(TAG,"onStartCommand");

        return START_STICKY;
    }

    private int tryGetSaveListData(){
        mLatLngVector = SharedPreferencesUtil.getListObject(this,TEMP_LIST);
        Log.e("初始化获得LatLngList:",mLatLngVector.size()+"");
        return mLatLngVector.size();
    }

    private void initMap() {
//        SharedPreferencesUtil.saveData(TEMP_LIST,"");
        mlocationClient = new AMapLocationClient(this);
        mLocationOption = new AMapLocationClientOption();
        mlocationClient.setLocationListener(this);
        mLocationOption.setLocationMode(AMapLocationClientOption.AMapLocationMode.Hight_Accuracy);
        // 设置定位间隔,单位毫秒,默认为2000ms
        mLocationOption.setInterval(2000);
        // 设置定位参数
        mlocationClient.setLocationOption(mLocationOption);
        mlocationClient.startLocation();
        intData();
    }

    @Override
    public boolean onUnbind(Intent intent) {
        Log.e(TAG,"onUnbind");
        onPauseLocatioin();

        //清空
        return super.onUnbind(intent);
    }

    @Override
    public void onDestroy() {
        super.onDestroy();
        onSportDown();
        Log.e(TAG,"onDestroy");

    }

    private void onWeatherStartLocatioin(){
        if (mlocationClient==null)
            initMap();
        mlocationClient.startLocation();
    }

    private void onWeatherPauseLocation(){
        if (mlocationClient!=null)
            mlocationClient.stopLocation();
    }

//    private void onStartLocation(){
//        if (mlocationClient==null)
//            initMap();
//        mlocationClient.startLocation();
//        timeRun();
//        mSporting = true;
//    }
    public void onPauseLocatioin(){
        if (mlocationClient!=null)
            mlocationClient.stopLocation();
        mSporting = false;
        hideNotification();
    }

    public void onSportDown(){
        mSporting = false;
        if (mTimer!=null){
            mTimer.cancel();
        }
        onReinitData();
        hideNotification();
    }
    public void onReinitData(){
        mValue = 0;
    }

    @Override
    public void onTaskRemoved(Intent rootIntent) {
        super.onTaskRemoved(rootIntent);
        Log.e(TAG,"onTaskRemoved");
//        saveTempMsg();
//        Log.e("保存LatLng数量:",mLatLngVector.size()+"");
    }

    /**
     * 保存临时数据
     */
    private void saveTempMsg(){
        SharedPreferences.Editor editor = getSharedPreferences(FILE_NAME, MODE_PRIVATE).edit();

        Gson gson = new Gson();
        String json = gson.toJson(mLatLngVector);
        editor.putString(TEMP_LIST, json);
        editor.commit();
        Fit.save(this,mSportBean);
    }

    private void intData(){
        mLatLngVector = new Vector<>();
    }

    /**
     * 获取临时数据
     */
    private boolean getTempMsg(){
        SharedPreferences preferences = getSharedPreferences(FILE_NAME, MODE_PRIVATE);
        String json = preferences.getString(TEMP_LIST, null);
        Vector<LatLng> data = new Vector<LatLng>();
        if (json != null && !json.equals("")) {
            Gson gson = new Gson();
            Type type = new TypeToken<Vector<LatLng>>(){}.getType();
            data = gson.fromJson(json, type);
        }
        mLatLngVector = data;
        Log.e(TAG,"重新获取Data数量:"+mLatLngVector.size());

//        String string = preferences.getString(TEMP_OBJECT, null);
//        if (string != null) {
//            mSportBean = (CSportInfoBean) String2Object(string);
//        }
        mSportBean = Fit.get(this,CSportInfoBean.class);
        if (mSportBean == null || mLatLngVector ==null || mLatLngVector.size() == 0)
            return false;
        Log.e("ListMMMMMMMMMM:",mLatLngVector.size()+"");
        Log.e("TIMEMMMMMMMMMM:",mSportBean.getStart_time());

        //读完清空
        SharedPreferencesUtil.saveData(TEMP_LIST,"");
        return true;
    }

    public class MapBinder extends Binder{
        public void startLocation(){
//            onStartLocation();
        }
        public void pauseLocatioin(){
            onPauseLocatioin();
        }

        public void startSport(){
            mSporting = true;
            timeRun();
            showNotification();
        }

        public void pauseSport(){
            mSporting = false;
            if (mTimer!=null){
                mTimer.cancel();
            }
        }

        public void sportDown(){
            onSportDown();
            updateNotification(0);
        }

        public Vector<LatLng> synListData(){
            return mLatLngVector;
        }
        //完成跑步
        public CSportInfoBean sportFinish(){
            mSportBean.setFinish_time(DataUtils.getStringToDate(DataUtils
                    .getCurrentDate()));
            mSportBean.setTime(String.valueOf(mValue));
            onSportDown();
            return mSportBean;
        }
        public void setSportType(int type,int calorie_unit){
            mSportType = type;
            mSportBean = new CSportInfoBean();
            mSportBean.setStart_time(DataUtils.getStringToDate(DataUtils
                    .getCurrentDate()));
            mSportBean.setDistance(0d);
            mSportBean.setCalorie(0d);
            mSportBean.setTypes(type == TYPE_RUN ? "1" : "2");
            mSportBean.setCalorie_unit(calorie_unit);
            if (mLatLngVector!=null)
                mLatLngVector.clear();
//            onStartLocation();
            startSport();
        }


        public void commitSportMsg(){
            //提交数据到服务器
        }

        public void getWeatherLocationMsg(){
            mWeatherService = true;
            onWeatherStartLocatioin();
        }

    }

    @Override
    public void onLocationChanged(AMapLocation aMapLocation) {
        if (aMapLocation != null) {
            if (aMapLocation.getErrorCode() == 0) {
                Intent intent = new Intent(TAG);
                intent.putExtra(MAPLOCATION,aMapLocation);
                if (mSporting) {
                    updateSportInfo(aMapLocation);
                    intent.putExtra(MAPINFO,mSportBean);
                }
                if (mWeatherService){
                    mWeatherService = false;
                    intent.putExtra(WEATHER,true);
                }
                LocalBroadcastManager.getInstance(this).sendBroadcast(intent);
//
            } else {
                // 定位失败时，可通过ErrCode（错误码）信息来确定失败的原因，errInfo是错误信息，详见错误码表。
                Log.e("AmapError",
                        "location Error, ErrCode:"
                                + aMapLocation.getErrorCode() + ", errInfo:"
                                + aMapLocation.getErrorInfo());
            }
        }
    }
    //启动前台通知
    private void showNotification(){
        Notification.Builder builder = new Notification.Builder(this)
                .setSmallIcon(R.drawable.logo)
                .setContentTitle("--KM")
                .setContentText("里程");

        // 设置启动的程序，如果存在则找出，否则新的启动
        Intent intent = new Intent(Intent.ACTION_MAIN);
//        intent.putExtra(ACTION_RESTART,true);
        intent.addCategory(Intent.CATEGORY_LAUNCHER);
        intent.setComponent(new ComponentName(this.getPackageName(), LaunchActivity.class.getCanonicalName()));//用ComponentName得到class对象
        intent.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK|Intent.FLAG_ACTIVITY_RESET_TASK_IF_NEEDED);// 关键的一步，设置启动模式，两种情况
        PendingIntent contentIntent = PendingIntent.getActivity(this, 0, intent, 0);//将经过设置了的Intent绑定给PendingIntent
        //获取通知服务
        NotificationManager nm = (NotificationManager)getSystemService(Context.NOTIFICATION_SERVICE);
//		//构建通知
        Notification notification = builder.build();
        notification.flags |= Notification.FLAG_NO_CLEAR;
        notification.contentIntent = contentIntent;
//		//显示通知
        nm.notify(1,notification);
//		//启动为前台服务
        startForeground(1,notification);
    }
    private void updateNotification(double curds){
        BigDecimal decimal = new BigDecimal(curds / 1000.0);

        String ds = decimal.setScale(2, BigDecimal.ROUND_HALF_UP)
                .floatValue() + "KM";


        NotificationManager nm = (NotificationManager)getSystemService(Context.NOTIFICATION_SERVICE);
//		//构建通知
        Notification.Builder builder = new Notification.Builder(this)
                .setSmallIcon(R.drawable.logo)
                .setContentTitle(ds)
                .setContentText("里程");
        Intent intent = new Intent(Intent.ACTION_MAIN);
//        intent.putExtra(ACTION_RESTART,true);
        intent.addCategory(Intent.CATEGORY_LAUNCHER);
        intent.setComponent(new ComponentName(this.getPackageName(), LaunchActivity.class.getCanonicalName()));//用ComponentName得到class对象
        intent.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK|Intent.FLAG_ACTIVITY_RESET_TASK_IF_NEEDED);// 关键的一步，设置启动模式，两种情况
        PendingIntent contentIntent = PendingIntent.getActivity(this, 0, intent, 0);//将经过设置了的Intent绑定给PendingIntent
        Notification notification = builder.build();
        notification.flags |= Notification.FLAG_NO_CLEAR;
        notification.contentIntent = contentIntent;
//		//显示通知
        nm.notify(1,notification);
    }

    private void hideNotification() {
        NotificationManager nm = (NotificationManager)getSystemService(Context.NOTIFICATION_SERVICE);
        nm.cancel(1);
    }

    private void updateSportInfo(AMapLocation aMapLocation) {
        //测试
        double lat = aMapLocation.getLatitude();
        aMapLocation.setLatitude( lat - mValue*0.00001);
        //----------

        if (mOldPoint == null){
            mOldPoint = new LatLng(aMapLocation.getLatitude(),aMapLocation.getLongitude());
            mLatLngVector.add(mOldPoint);
        }
        mNewPoint = new LatLng(aMapLocation.getLatitude(),aMapLocation.getLongitude());

        float ds = AMapUtils.calculateLineDistance(mOldPoint, mNewPoint);
        if (ds>0){
            ViseLog.e("Service: old"+mOldPoint,"new"+mNewPoint);
            mLatLngVector.add(mNewPoint);
            mOldPoint = mNewPoint;
        }
        double curDs = mSportBean.getDistance();
        curDs += ds;
        //速度检测
        speedWatch(ds,mSportType);
        //路障检测
        roadblockWatch(curDs);
        ViseLog.e("超速标志:"+speedOver+"|缓慢标志:+"+speedSLow);

        if (mLatLngVector.size() < 2){
            return;
        }

        mSportBean.setDistance(curDs);
        updateNotification(curDs); //更新通知
        mSportBean.setCalorie(mSportBean.getCalorie_unit() * curDs * 0.812 / 1000);
//        mSportBean.setPath();

        //速度检测
//        speedWatch(ds,mSportType);
        //路障检测
//        roadblockWatch(curDs);
//        ViseLog.e("超速标志:"+speedOver+"|缓慢标志:+"+speedSLow);
    }

    private void roadblockWatch(double curDs) {
        if (curDs > roadblock){
            notifyClientRoadBlock(roadblock / 1000);
            roadblock += 1000;
        }
    }

    private void notifyClientRoadBlock(int tag) {
        Intent intent = new Intent(TAG);
        intent.putExtra(ROAD_BLOCK,tag);
        LocalBroadcastManager.getInstance(this).sendBroadcast(intent);
    }

    private void doSpeedOver(){
        notifyClientSpeedOver();
//        onPauseLocatioin();
//        mSportBean.setFinish_time(DataUtils.getStringToDate(DataUtils
//                .getCurrentDate()));
        onSportDown();
        speedOver = 0;
    }

    private void speedWatch(float ds, int mSportType) {
        int tag = mSportType == TYPE_RIDE ? 22 : 16;

        //正常
        if (ds < tag && ds > 1){

        }else if (ds > tag){
            //超速
            speedOver++;
            if (speedOver > 30) {
                doSpeedOver();
            }

        }else{
            //缓慢
            speedSLow ++;
            if (speedSLow > 40){
                Log.e(TAG,"缓慢提醒");
                notifyClientSpeedSlow();
                speedSLow -= 20;
            }
        }
    }

    //通知client速度异常
    private void notifyClientSpeedOver() {
        Intent intent = new Intent(TAG);
        intent.putExtra(SPEED_OVER,true);
        LocalBroadcastManager.getInstance(this).sendBroadcast(intent);
    }

    //通知client速度缓慢
    private void notifyClientSpeedSlow() {
        Intent intent = new Intent(TAG);
        intent.putExtra(SPEED_SLOW,true);
        LocalBroadcastManager.getInstance(this).sendBroadcast(intent);
    }

    private void notifyClientDrawPoint(){
        Intent intent = new Intent(TAG);
        intent.putExtra(SYN_POINTLIST,mLatLngVector);
        LocalBroadcastManager.getInstance(this).sendBroadcast(intent);
    }
}
