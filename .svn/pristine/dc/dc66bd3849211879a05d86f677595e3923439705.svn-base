package com.yhrjkf.woyundong.fragment;

import java.util.ArrayList;
import java.util.Calendar;
import java.util.List;

import butterknife.Bind;
import lecho.lib.hellocharts.gesture.ZoomType;
import lecho.lib.hellocharts.model.Axis;
import lecho.lib.hellocharts.model.AxisValue;
import lecho.lib.hellocharts.model.Line;
import lecho.lib.hellocharts.model.LineChartData;
import lecho.lib.hellocharts.model.PointValue;
import lecho.lib.hellocharts.model.ValueShape;
import lecho.lib.hellocharts.model.Viewport;
import lecho.lib.hellocharts.view.LineChartView;
import rx.Observable;
//import sun.bob.mcalendarview.CellConfig;
//import sun.bob.mcalendarview.MarkStyle;
//import sun.bob.mcalendarview.listeners.OnExpDateClickListener;
//import sun.bob.mcalendarview.listeners.OnMonthScrollListener;
//import sun.bob.mcalendarview.views.ExpCalendarView;
//import sun.bob.mcalendarview.vo.DateData;

import org.json.JSONArray;
import org.json.JSONException;
import org.json.JSONObject;

import android.content.Intent;
import android.graphics.Color;
import android.os.Bundle;
import android.os.Handler;
import android.os.Message;
import android.support.annotation.Nullable;
import android.support.v4.view.ViewPager;
import android.util.Log;
import android.view.LayoutInflater;
import android.view.View;
import android.view.View.OnClickListener;
import android.view.ViewGroup;
import android.widget.ImageView;
import android.widget.LinearLayout;
import android.widget.ListView;
import android.widget.TextView;

import com.kaopiz.kprogresshud.KProgressHUD;
import com.lidroid.xutils.HttpUtils;
import com.lidroid.xutils.exception.HttpException;
import com.lidroid.xutils.http.RequestParams;
import com.lidroid.xutils.http.ResponseInfo;
import com.lidroid.xutils.http.callback.RequestCallBack;
import com.lidroid.xutils.http.client.HttpRequest.HttpMethod;
import com.vise.log.ViseLog;
import com.vise.xsnow.net.callback.ApiCallback;
import com.vise.xsnow.net.exception.ApiException;
import com.vise.xsnow.net.mode.CacheResult;
import com.yhrjkf.woyundong.App;
import com.yhrjkf.woyundong.BaseFragment;
import com.yhrjkf.woyundong.BaseToolbarFragment;
import com.yhrjkf.woyundong.CalendarModule.CaledarAdapter;
import com.yhrjkf.woyundong.CalendarModule.CalendarBean;
import com.yhrjkf.woyundong.CalendarModule.CalendarDateView;
import com.yhrjkf.woyundong.CalendarModule.CalendarView;
import com.yhrjkf.woyundong.activity.HistoryDayActivity;
import com.yhrjkf.woyundong.R;
import com.yhrjkf.woyundong.bean.VMonthBean;
import com.yhrjkf.woyundong.bean.VMonthSportBean;
import com.yhrjkf.woyundong.http.Api;
import com.yhrjkf.woyundong.http.WooSportApi;
import com.yhrjkf.woyundong.tools.AppConfig;
import com.yhrjkf.woyundong.utils.CommonUtils;
import com.yhrjkf.woyundong.utils.RxUtils;

public class HistoryFragment extends BaseFragment implements OnClickListener {

	private TextView tv_his_day1, tv_his_day2, tv_his_day3, tv_his_day4,
			tv_his_day5, tv_his_day6, tv_his_day7, tv_his_day8, tv_his_day9,
			tv_his_day10, tv_his_day11, tv_his_day12, tv_his_day13,
			tv_his_day14, tv_his_day15, tv_his_day16, tv_his_day17,
			tv_his_day18, tv_his_day19, tv_his_day20, tv_his_day21,
			tv_his_day22, tv_his_day23, tv_his_day24, tv_his_day25,
			tv_his_day26, tv_his_day27, tv_his_day28, tv_his_day29,
			tv_his_day30, tv_his_day31, tv_his_month, tv_his_left,
			tv_his_right, tv_history_cishu, tv_history_time, tv_history_juli,
			tv_history_reliang;
	private Intent intent;
	private List<String> mMonthList = new ArrayList<>();
	private Handler handler;
	private Double[] dayInfo;
	private String[] day;
	private List<PointValue> mPointValues = new ArrayList<PointValue>();
	private List<AxisValue> mAxisXValues = new ArrayList<AxisValue>();
	private LineChartView lineChart;
	private int tag = 0;
	private List<TextView> tvList = new ArrayList<TextView>();
	private LinearLayout ll_back;

	public static HistoryFragment getInstance() {
		HistoryFragment fragment = new HistoryFragment();
		fragment.setArguments(new Bundle());
		return fragment;
	}

	@Override
	protected int getFragmentLayoutId() {
		return R.layout.activity_history2;
	}

	@Override
	protected void initView(View contentView) {
		tv_his_day1 = (TextView) contentView.findViewById(R.id.tv_his_day1);
		tv_his_day2 = (TextView) contentView.findViewById(R.id.tv_his_day2);
		tv_his_day3 = (TextView) contentView.findViewById(R.id.tv_his_day3);
		tv_his_day4 = (TextView) contentView.findViewById(R.id.tv_his_day4);
		tv_his_day5 = (TextView) contentView.findViewById(R.id.tv_his_day5);
		tv_his_day6 = (TextView) contentView.findViewById(R.id.tv_his_day6);
		tv_his_day7 = (TextView) contentView.findViewById(R.id.tv_his_day7);
		tv_his_day8 = (TextView) contentView.findViewById(R.id.tv_his_day8);
		tv_his_day9 = (TextView) contentView.findViewById(R.id.tv_his_day9);
		tv_his_day10 = (TextView) contentView.findViewById(R.id.tv_his_day10);
		tv_his_day11 = (TextView) contentView.findViewById(R.id.tv_his_day11);
		tv_his_day12 = (TextView) contentView.findViewById(R.id.tv_his_day12);
		tv_his_day13 = (TextView) contentView.findViewById(R.id.tv_his_day13);
		tv_his_day14 = (TextView) contentView.findViewById(R.id.tv_his_day14);
		tv_his_day15 = (TextView) contentView.findViewById(R.id.tv_his_day15);
		tv_his_day16 = (TextView) contentView.findViewById(R.id.tv_his_day16);
		tv_his_day17 = (TextView) contentView.findViewById(R.id.tv_his_day17);
		tv_his_day18 = (TextView) contentView.findViewById(R.id.tv_his_day18);
		tv_his_day19 = (TextView) contentView.findViewById(R.id.tv_his_day19);
		tv_his_day20 = (TextView) contentView.findViewById(R.id.tv_his_day20);
		tv_his_day21 = (TextView) contentView.findViewById(R.id.tv_his_day21);
		tv_his_day22 = (TextView) contentView.findViewById(R.id.tv_his_day22);
		tv_his_day23 = (TextView) contentView.findViewById(R.id.tv_his_day23);
		tv_his_day24 = (TextView) contentView.findViewById(R.id.tv_his_day24);
		tv_his_day25 = (TextView) contentView.findViewById(R.id.tv_his_day25);
		tv_his_day26 = (TextView) contentView.findViewById(R.id.tv_his_day26);
		tv_his_day27 = (TextView) contentView.findViewById(R.id.tv_his_day27);
		tv_his_day28 = (TextView) contentView.findViewById(R.id.tv_his_day28);
		tv_his_day29 = (TextView) contentView.findViewById(R.id.tv_his_day29);
		tv_his_day30 = (TextView) contentView.findViewById(R.id.tv_his_day30);
		tv_his_day31 = (TextView) contentView.findViewById(R.id.tv_his_day31);
		tv_his_month = (TextView) contentView.findViewById(R.id.tv_his_month);
		tv_his_left = (TextView) contentView.findViewById(R.id.tv_his_left);
		tv_his_right = (TextView) contentView.findViewById(R.id.tv_his_right);
		lineChart = (LineChartView) contentView.findViewById(R.id.line_chart);
		ll_back = (LinearLayout) contentView.findViewById(R.id.ll_back);
		tv_history_cishu = (TextView) contentView.findViewById(R.id.tv_history_cishu);
		tv_history_time = (TextView) contentView.findViewById(R.id.tv_history_time);
		tv_history_juli = (TextView) contentView.findViewById(R.id.tv_history_juli);
		tv_history_reliang = (TextView) contentView.findViewById(R.id.tv_history_reliang);

	}

	@Override
	protected void initData() {
		tvList.add(tv_his_day1);
		tvList.add(tv_his_day2);
		tvList.add(tv_his_day3);
		tvList.add(tv_his_day4);
		tvList.add(tv_his_day5);
		tvList.add(tv_his_day6);
		tvList.add(tv_his_day7);
		tvList.add(tv_his_day8);
		tvList.add(tv_his_day9);
		tvList.add(tv_his_day10);
		tvList.add(tv_his_day11);
		tvList.add(tv_his_day12);
		tvList.add(tv_his_day13);
		tvList.add(tv_his_day14);
		tvList.add(tv_his_day15);
		tvList.add(tv_his_day16);
		tvList.add(tv_his_day17);
		tvList.add(tv_his_day18);
		tvList.add(tv_his_day19);
		tvList.add(tv_his_day20);
		tvList.add(tv_his_day21);
		tvList.add(tv_his_day22);
		tvList.add(tv_his_day23);
		tvList.add(tv_his_day24);
		tvList.add(tv_his_day25);
		tvList.add(tv_his_day26);
		tvList.add(tv_his_day27);
		tvList.add(tv_his_day28);
		tvList.add(tv_his_day29);
		tvList.add(tv_his_day30);
		tvList.add(tv_his_day31);

		getMonData();
		whetherTfa();

		handler = new Handler() {
			@Override
			public void handleMessage(Message msg) {
				// TODO Auto-generated method stub
				super.handleMessage(msg);
				if (msg.arg1 == 0) {
//					tv_his_month.setText(monList.get(monList.size() - 1));
//					getDayData(monList.get(monList.size() - 1));
				} else if (msg.arg1 == 1) {
					whetherTfs();
					whetherTf();
					getAxisXLables();// 获取x轴的标注
					getAxisPoints();// 获取坐标点
					initLineChart();// 初始化

				}

			}
		};
	}

	@Override
	protected void bindEvent() {
		tv_his_day1.setOnClickListener(this);
		tv_his_day2.setOnClickListener(this);
		tv_his_day3.setOnClickListener(this);
		tv_his_day4.setOnClickListener(this);
		tv_his_day5.setOnClickListener(this);
		tv_his_day6.setOnClickListener(this);
		tv_his_day7.setOnClickListener(this);
		tv_his_day8.setOnClickListener(this);
		tv_his_day9.setOnClickListener(this);
		tv_his_day10.setOnClickListener(this);
		tv_his_day11.setOnClickListener(this);
		tv_his_day12.setOnClickListener(this);
		tv_his_day13.setOnClickListener(this);
		tv_his_day14.setOnClickListener(this);
		tv_his_day15.setOnClickListener(this);
		tv_his_day16.setOnClickListener(this);
		tv_his_day17.setOnClickListener(this);
		tv_his_day18.setOnClickListener(this);
		tv_his_day19.setOnClickListener(this);
		tv_his_day20.setOnClickListener(this);
		tv_his_day21.setOnClickListener(this);
		tv_his_day22.setOnClickListener(this);
		tv_his_day23.setOnClickListener(this);
		tv_his_day24.setOnClickListener(this);
		tv_his_day25.setOnClickListener(this);
		tv_his_day26.setOnClickListener(this);
		tv_his_day27.setOnClickListener(this);
		tv_his_day28.setOnClickListener(this);
		tv_his_day29.setOnClickListener(this);
		tv_his_day30.setOnClickListener(this);
		tv_his_day31.setOnClickListener(this);
		tv_his_left.setOnClickListener(this);
		tv_his_right.setOnClickListener(this);
		ll_back.setOnClickListener(this);
	}
//
//	@Override
//	protected void onCreate(Bundle savedInstanceState) {
//		// TODO Auto-generated method stub
//		super.onCreate(savedInstanceState);
//
//		setContentView();
////		getMonData();
////		whetherTfa();
//
//
//	}

	private void iniv() {
		// TODO Auto-generated method stub



	}

	@Override
	public void onClick(View v) {
		// TODO Auto-generated method stub
		switch (v.getId()) {
			case R.id.tv_his_day1:
				if (dayInfo[0] == 0.0) {

				} else {
					intent = new Intent();
					intent.setClass(getActivity(),
							HistoryDayActivity.class);
					intent.putExtra("monst", mMonthList.get(tag));
					intent.putExtra("day", "1");
					startActivity(intent);
				}

				break;
			case R.id.tv_his_day2:
				if (dayInfo[1] == 0.0) {

				} else {
					intent = new Intent();
					intent.setClass(getActivity(),
							HistoryDayActivity.class);
					intent.putExtra("monst", mMonthList.get(tag));
					intent.putExtra("day", "2");
					startActivity(intent);
				}

				break;
			case R.id.tv_his_day3:
				if (dayInfo[2] == 0.0) {

				} else {
					intent = new Intent();
					intent.setClass(getActivity(),
							HistoryDayActivity.class);
					intent.putExtra("monst", mMonthList.get(tag));
					intent.putExtra("day", "3");
					startActivity(intent);
				}
				break;
			case R.id.tv_his_day4:
				if (dayInfo[3] == 0.0) {

				} else {
					intent = new Intent();
					intent.setClass(getActivity(),
							HistoryDayActivity.class);
					intent.putExtra("monst", mMonthList.get(tag));
					intent.putExtra("day", "4");
					startActivity(intent);
				}
				break;
			case R.id.tv_his_day5:
				if (dayInfo[4] == 0.0) {

				} else {
					intent = new Intent();
					intent.setClass(getActivity(),
							HistoryDayActivity.class);
					intent.putExtra("monst", mMonthList.get(tag));
					intent.putExtra("day", "5");
					startActivity(intent);
				}
				break;
			case R.id.tv_his_day6:
				if (dayInfo[5] == 0.0) {

				} else {
					intent = new Intent();
					intent.setClass(getActivity(),
							HistoryDayActivity.class);
					intent.putExtra("monst", mMonthList.get(tag));
					intent.putExtra("day", "6");
					startActivity(intent);
				}
				break;
			case R.id.tv_his_day7:
				if (dayInfo[6] == 0.0) {

				} else {
					intent = new Intent();
					intent.setClass(getActivity(),
							HistoryDayActivity.class);
					intent.putExtra("monst", mMonthList.get(tag));
					intent.putExtra("day", "7");
					startActivity(intent);
				}
				break;
			case R.id.tv_his_day8:
				if (dayInfo[7] == 0.0) {

				} else {
					intent = new Intent();
					intent.setClass(getActivity(),
							HistoryDayActivity.class);
					intent.putExtra("monst", mMonthList.get(tag));
					intent.putExtra("day", "8");
					startActivity(intent);
				}
				break;
			case R.id.tv_his_day9:
				if (dayInfo[8] == 0.0) {

				} else {
					intent = new Intent();
					intent.setClass(getActivity(),
							HistoryDayActivity.class);
					intent.putExtra("monst", mMonthList.get(tag));
					intent.putExtra("day", "9");
					startActivity(intent);
				}
				break;
			case R.id.tv_his_day10:
				if (dayInfo[9] == 0.0) {

				} else {
					intent = new Intent();
					intent.setClass(getActivity(),
							HistoryDayActivity.class);
					intent.putExtra("monst", mMonthList.get(tag));
					intent.putExtra("day", "10");
					startActivity(intent);
				}
				break;
			case R.id.tv_his_day11:
				if (dayInfo[10] == 0.0) {

				} else {
					intent = new Intent();
					intent.setClass(getActivity(),
							HistoryDayActivity.class);
					intent.putExtra("monst", mMonthList.get(tag));
					intent.putExtra("day", "11");
					startActivity(intent);
				}
				break;
			case R.id.tv_his_day12:
				if (dayInfo[11] == 0.0) {

				} else {
					intent = new Intent();
					intent.setClass(getActivity(),
							HistoryDayActivity.class);
					intent.putExtra("monst", mMonthList.get(tag));
					intent.putExtra("day", "12");
					startActivity(intent);
				}
				break;
			case R.id.tv_his_day13:
				if (dayInfo[12] == 0.0) {

				} else {
					intent = new Intent();
					intent.setClass(getActivity(),
							HistoryDayActivity.class);
					intent.putExtra("monst", mMonthList.get(tag));
					intent.putExtra("day", "13");
					startActivity(intent);
				}
				break;
			case R.id.tv_his_day14:
				if (dayInfo[13] == 0.0) {

				} else {
					intent = new Intent();
					intent.setClass(getActivity(),
							HistoryDayActivity.class);
					intent.putExtra("monst", mMonthList.get(tag));
					intent.putExtra("day", "14");
					startActivity(intent);
				}
				break;
			case R.id.tv_his_day15:
				if (dayInfo[14] == 0.0) {

				} else {
					intent = new Intent();
					intent.setClass(getActivity(),
							HistoryDayActivity.class);
					intent.putExtra("monst", mMonthList.get(tag));
					intent.putExtra("day", "15");
					startActivity(intent);
				}
				break;
			case R.id.tv_his_day16:
				if (dayInfo[15] == 0.0) {

				} else {
					intent = new Intent();
					intent.setClass(getActivity(),
							HistoryDayActivity.class);
					intent.putExtra("monst", mMonthList.get(tag));
					intent.putExtra("day", "16");
					startActivity(intent);
				}
				break;
			case R.id.tv_his_day17:
				if (dayInfo[16] == 0.0) {

				} else {
					intent = new Intent();
					intent.setClass(getActivity(),
							HistoryDayActivity.class);
					intent.putExtra("monst", mMonthList.get(tag));
					intent.putExtra("day", "17");
					startActivity(intent);
				}
				break;
			case R.id.tv_his_day18:
				if (dayInfo[17] == 0.0) {

				} else {
					intent = new Intent();
					intent.setClass(getActivity(),
							HistoryDayActivity.class);
					intent.putExtra("monst", mMonthList.get(tag));
					intent.putExtra("day", "18");
					startActivity(intent);
				}
				break;
			case R.id.tv_his_day19:
				if (dayInfo[18] == 0.0) {

				} else {
					intent = new Intent();
					intent.setClass(getActivity(),
							HistoryDayActivity.class);
					intent.putExtra("monst", mMonthList.get(tag));
					intent.putExtra("day", "19");
					startActivity(intent);
				}
				break;
			case R.id.tv_his_day20:
				if (dayInfo[19] == 0.0) {

				} else {
					intent = new Intent();
					intent.setClass(getActivity(),
							HistoryDayActivity.class);
					intent.putExtra("monst", mMonthList.get(tag));
					intent.putExtra("day", "20");
					startActivity(intent);
				}
				break;
			case R.id.tv_his_day21:
				if (dayInfo[20] == 0.0) {

				} else {
					intent = new Intent();
					intent.setClass(getActivity(),
							HistoryDayActivity.class);
					intent.putExtra("monst", mMonthList.get(tag));
					intent.putExtra("day", "21");
					startActivity(intent);
				}
				break;
			case R.id.tv_his_day22:
				if (dayInfo[21] == 0.0) {

				} else {
					intent = new Intent();
					intent.setClass(getActivity(),
							HistoryDayActivity.class);
					intent.putExtra("monst", mMonthList.get(tag));
					intent.putExtra("day", "22");
					startActivity(intent);
				}
				break;
			case R.id.tv_his_day23:
				if (dayInfo[22] == 0.0) {

				} else {
					intent = new Intent();
					intent.setClass(getActivity(),
							HistoryDayActivity.class);
					intent.putExtra("monst", mMonthList.get(tag));
					intent.putExtra("day", "23");
					startActivity(intent);
				}
				break;
			case R.id.tv_his_day24:
				if (dayInfo[23] == 0.0) {

				} else {
					intent = new Intent();
					intent.setClass(getActivity(),
							HistoryDayActivity.class);
					intent.putExtra("monst", mMonthList.get(tag));
					intent.putExtra("day", "24");
					startActivity(intent);
				}
				break;

			case R.id.tv_his_day25:
				if (dayInfo[24] == 0.0) {

				} else {
					intent = new Intent();
					intent.setClass(getActivity(),
							HistoryDayActivity.class);
					intent.putExtra("monst", mMonthList.get(tag));
					intent.putExtra("day", "25");
					startActivity(intent);
				}
				break;
			case R.id.tv_his_day26:
				if (dayInfo[25] == 0.0) {

				} else {
					intent = new Intent();
					intent.setClass(getActivity(),
							HistoryDayActivity.class);
					intent.putExtra("monst", mMonthList.get(tag));
					intent.putExtra("day", "26");
					startActivity(intent);
				}
				break;
			case R.id.tv_his_day27:
				if (dayInfo[26] == 0.0) {

				} else {
					intent = new Intent();
					intent.setClass(getActivity(),
							HistoryDayActivity.class);
					intent.putExtra("monst", mMonthList.get(tag));
					intent.putExtra("day", "27");
					startActivity(intent);
				}
				break;
			case R.id.tv_his_day28:
				if (dayInfo[27] == 0.0) {

				} else {
					intent = new Intent();
					intent.setClass(getActivity(),
							HistoryDayActivity.class);
					intent.putExtra("monst", mMonthList.get(tag));
					intent.putExtra("day", "28");
					startActivity(intent);
				}
				break;
			case R.id.tv_his_day29:
				if (dayInfo[28] == 0.0) {

				} else {
					intent = new Intent();
					intent.setClass(getActivity(),
							HistoryDayActivity.class);
					intent.putExtra("monst", mMonthList.get(tag));
					intent.putExtra("day", "29");
					startActivity(intent);
				}
				break;
			case R.id.tv_his_day30:
				if (dayInfo[29] == 0.0) {

				} else {
					intent = new Intent();
					intent.setClass(getActivity(),
							HistoryDayActivity.class);
					intent.putExtra("monst", mMonthList.get(tag));
					intent.putExtra("day", "30");
					startActivity(intent);
				}
				break;
			case R.id.tv_his_day31:
				if (dayInfo[30] == 0.0) {

				} else {
					intent = new Intent();
					intent.setClass(getActivity(),
							HistoryDayActivity.class);
					intent.putExtra("monst", mMonthList.get(tag));
					intent.putExtra("day", "31");
					startActivity(intent);
				}
				break;
			case R.id.tv_his_left:
				if (tag > 0) {
					tag = tag - 1;
					tv_his_month.setText(mMonthList.get(tag));
					getDayData(mMonthList.get(tag));
				}

				break;
			case R.id.tv_his_right:
				if ((tag + 1) < mMonthList.size()) {
					tag = tag + 1;
					tv_his_month.setText(mMonthList.get(tag));
					getDayData(mMonthList.get(tag));
				}
				break;
			case R.id.ll_back:
				pop();
				break;

			default:
				break;
		}

	}

	KProgressHUD mHud;
	/**
	 * 获取哪几个月运动了
	 */
	public void getMonData() {

		WooSportApi.getInstance().startGetSportMonth(mContext, String.valueOf(App.newInstance().getUserBean().getId()),
				new ApiCallback<VMonthBean>() {
			@Override
			public void onStart() {
				mHud = KProgressHUD.create(getContext())
						.setStyle(KProgressHUD.Style.SPIN_INDETERMINATE)
						.setLabel("加载中")
						.setCancellable(true);
				mHud.show();
			}

			@Override
			public void onError(ApiException e) {
				ViseLog.e(e);
				showToast("数据获取失败！");
				mHud.dismiss();
			}

			@Override
			public void onCompleted() {
				mHud.dismiss();
			}

			@Override
			public void onNext(VMonthBean result) {
				mHud.dismiss();
				if (result !=null && result.getData()!=null ) {
					//&& result.getCacheData().getRecode().equals("200")
					mMonthList = result.getData();
					tag = mMonthList.size() - 1;
					tv_his_month.setText(mMonthList.get(mMonthList.size() - 1));
					if (mMonthList.size() > 0)
						getDayData(mMonthList.get(mMonthList.size() - 1));

				}else{
					showToast("无数据！");
				}


			}
		});
		
//		HttpUtils httpUtils = new HttpUtils();
//		RequestParams params = new RequestParams("UTF-8");
//		params.addBodyParameter("uid", String.valueOf(App.newInstance().getUserBean().getId()));
//		httpUtils.send(HttpMethod.POST, AppConfig.HISTORYMON, params,
//				new RequestCallBack<String>() {
//
//					@Override
//					public void onFailure(HttpException arg0, String arg1) {
//						// TODO Auto-generated method stub
//						Log.i("HttpException", arg1);
//
//					}
//
//					@Override
//					public void onSuccess(ResponseInfo<String> responseInfo) {
//						// TODO Auto-generated method stub
//						try {
//							JSONObject jsonObject = new JSONObject(
//									responseInfo.result);
//							JSONArray jsonArray = jsonObject
//									.getJSONArray("Data");
//							String recodeString = jsonObject
//									.getString("Recode");
//							for (int i = 0; i < jsonArray.length(); i++) {
//								String monString = jsonArray.getString(i);
//								monList.add(monString);
//							}
//							tag = monList.size() - 1;
//							if (recodeString.equals("200")) {
//								Message message = new Message();
//								message.arg1 = 0;
//								handler.sendMessage(message);
//							}
//
//						} catch (JSONException e) {
//							// TODO Auto-generated catch block
//							e.printStackTrace();
//						}
//
//					}
//				});

	}

	/**
	 * 获取某一个月份运动的数据
	 */

	private void getDayData(String monString) {
		// TODO Auto-generated method stub
		
		WooSportApi.getInstance().startGetSportDay(mContext, String.valueOf(App.newInstance().getUserBean().getId()), monString,
				new ApiCallback<CacheResult<VMonthSportBean>>() {
					@Override
					public void onStart() {
						mHud = KProgressHUD.create(getContext())
								.setStyle(KProgressHUD.Style.SPIN_INDETERMINATE)
								.setLabel("加载中")
								.setCancellable(true);
						mHud.show();
					}

					@Override
					public void onError(ApiException e) {
						ViseLog.e(e);
						mHud.dismiss();
					}

					@Override
					public void onCompleted() {
						mHud.dismiss();
					}

					@Override
					public void onNext(CacheResult<VMonthSportBean> vMonthSportBeanCacheResult) {
						if (vMonthSportBeanCacheResult==null)
							return;
						VMonthSportBean bean = vMonthSportBeanCacheResult.getCacheData();
						tv_history_cishu.setText(String.valueOf(bean.getSum().getCount()));
						tv_history_time.setText(String.valueOf(bean.getSum().getTime()));
						tv_history_juli.setText(String.valueOf(bean.getSum().getDistance()));
						tv_history_reliang.setText(String.valueOf(bean.getSum().getCalorie()));


						dayInfo = new Double[bean.getData().size()];
						day = new String[bean.getData().size()];

						switch (bean.getData().size()) {
							case 28:
								tv_his_day29.setVisibility(View.GONE);
								tv_his_day30.setVisibility(View.GONE);
								tv_his_day31.setVisibility(View.GONE);

								break;
							case 29:
								tv_his_day29.setVisibility(View.VISIBLE);
								tv_his_day30.setVisibility(View.GONE);
								tv_his_day31.setVisibility(View.GONE);

								break;
							case 30:
								tv_his_day29.setVisibility(View.VISIBLE);
								tv_his_day30.setVisibility(View.VISIBLE);
								tv_his_day31.setVisibility(View.GONE);

								break;
							case 31:
								tv_his_day29.setVisibility(View.VISIBLE);
								tv_his_day30.setVisibility(View.VISIBLE);
								tv_his_day31.setVisibility(View.VISIBLE);
								break;
							default:
								break;
						}
						for (int i = 0; i < bean.getData().size(); i++) {
							dayInfo[i] = bean.getData().get(i);
							day[i] = i + 1 + "";
						}
//						String recodeString = jsonObject
//								.getString("Recode");
//						if (recodeString.equals("200")) {
//							Message message = new Message();
//							message.arg1 = 1;
//							handler.sendMessage(message);
//						}
						whetherTfs();
						whetherTf();
						getAxisXLables();// 获取x轴的标注
						getAxisPoints();// 获取坐标点
						initLineChart();// 初始化

						mHud.dismiss();
					}
				});
		
//		HttpUtils httpUtils = new HttpUtils();
//		RequestParams params = new RequestParams("UTF-8");
//		params.addBodyParameter("uid", String.valueOf(App.newInstance().getUserBean().getId()));
//		params.addBodyParameter("monst", monString);
//		httpUtils.send(HttpMethod.POST, AppConfig.HISTORYDAY, params,
//				new RequestCallBack<String>() {
//
//					@Override
//					public void onFailure(HttpException arg0, String arg1) {
//						// TODO Auto-generated method stub
//						Log.i("HttpException", arg1);
//						whetherTfa();
//					}
//
//					@Override
//					public void onSuccess(ResponseInfo<String> responseInfo) {
//						// TODO Auto-generated method stub
//						Log.i("result", responseInfo.result);
//						day = null;
//						dayInfo = null;
//						try {
//							JSONObject jsonObject = new JSONObject(
//									responseInfo.result);
//							JSONArray jsonArray = jsonObject
//									.getJSONArray("Data");
//							// tv_history_cishu, tv_history_time,
//							// tv_history_juli,
//							// tv_history_reliang
//							JSONObject jsonObject3 = jsonObject
//									.getJSONObject("Sum");
//							tv_history_cishu.setText(jsonObject3
//									.getString("count"));
//							tv_history_time.setText(jsonObject3
//									.getString("time"));
//							tv_history_juli.setText(jsonObject3
//									.getString("distance"));
//							tv_history_reliang.setText(jsonObject3
//									.getString("calorie"));
//
//							dayInfo = new Float[jsonArray.length()];
//							day = new String[jsonArray.length()];
//							switch (jsonArray.length()) {
//								case 28:
//									tv_his_day29.setVisibility(View.GONE);
//									tv_his_day30.setVisibility(View.GONE);
//									tv_his_day31.setVisibility(View.GONE);
//
//									break;
//								case 29:
//									tv_his_day29.setVisibility(View.VISIBLE);
//									tv_his_day30.setVisibility(View.GONE);
//									tv_his_day31.setVisibility(View.GONE);
//
//									break;
//								case 30:
//									tv_his_day29.setVisibility(View.VISIBLE);
//									tv_his_day30.setVisibility(View.VISIBLE);
//									tv_his_day31.setVisibility(View.GONE);
//
//									break;
//								case 31:
//									tv_his_day29.setVisibility(View.VISIBLE);
//									tv_his_day30.setVisibility(View.VISIBLE);
//									tv_his_day31.setVisibility(View.VISIBLE);
//									break;
//								default:
//									break;
//							}
//							for (int i = 0; i < jsonArray.length(); i++) {
//								dayInfo[i] = Float.parseFloat(jsonArray
//										.getString(i));
//								day[i] = i + 1 + "";
//							}
//							String recodeString = jsonObject
//									.getString("Recode");
//							if (recodeString.equals("200")) {
//								Message message = new Message();
//								message.arg1 = 1;
//								handler.sendMessage(message);
//							}
//
//						} catch (JSONException e) {
//							// TODO Auto-generated catch block
//							e.printStackTrace();
//						}
//
//					}
//				});

	}

	/**
	 * 初始化LineChart的一些设置
	 */
	private void initLineChart() {
		Line line = new Line(mPointValues)
				.setColor(Color.parseColor("#FFCD41")); // 折线的颜色
		List<Line> lines = new ArrayList<Line>();
		line.setShape(ValueShape.CIRCLE);// 折线图上每个数据点的形状 这里是圆形 （有三种
		// ：ValueShape.SQUARE
		// ValueShape.CIRCLE
		// ValueShape.SQUARE）
		line.setCubic(false);// 曲线是否平滑
		line.setStrokeWidth(2);// 线条的粗细，默认是3
		line.setFilled(false);// 是否填充曲线的面积
		line.setHasLabels(true);// 曲线的数据坐标是否加上备注
		// line.setHasLabelsOnlyForSelected(true);//点击数据坐标提示数据（设置了这个line.setHasLabels(true);就无效）
		line.setHasLines(true);// 是否用直线显示。如果为false 则没有曲线只有点显示
		line.setHasPoints(true);// 是否显示圆点 如果为false 则没有原点只有点显示
		lines.add(line);
		LineChartData data = new LineChartData();
		data.setLines(lines);

		// 坐标轴
		Axis axisX = new Axis(); // X轴
		axisX.setHasTiltedLabels(false); // X轴下面坐标轴字体是斜的显示还是直的，true是斜的显示
		// axisX.setTextColor(Color.WHITE); //设置字体颜色
		axisX.setTextColor(Color.parseColor("#D6D6D9"));// 灰色
		// axisX.setName("月度统计表"); // 表格名称
		axisX.setTextSize(11);// 设置字体大小
		axisX.setMaxLabelChars(1); // 最多几个X轴坐标，意思就是你的缩放让X轴上数据的个数7<=x<=mAxisValues.length
		axisX.setValues(mAxisXValues); // 填充X轴的坐标名称
		data.setAxisXBottom(axisX); // x 轴在底部
		// data.setAxisXTop(axisX); //x 轴在顶部

		Axis axisY = new Axis(); // Y轴
		axisY.setName("");// y轴标注
		axisY.setTextSize(11);// 设置字体大小
		data.setAxisYLeft(axisY); // Y轴设置在左边
		axisY.setHasLines(true); // Y轴分割线
		// data.setAxisYRight(axisY); //y轴设置在右边
		// 设置行为属性，支持缩放、滑动以及平移
		lineChart.setInteractive(true);
		lineChart.setZoomType(ZoomType.HORIZONTAL); // 缩放类型，水平
		// lineChart.setMaxZoom((float) 3);// 缩放比例
		lineChart.setMaxZoom((float) 7);
		lineChart.setLineChartData(data);
		lineChart.setVisibility(View.VISIBLE);

		/**
		 * 注：下面的7，10只是代表一个数字去类比而已
		 * 尼玛搞的老子好辛苦！！！见（http://forum.xda-developers.com/tools
		 * /programming/library-hellocharts-charting-library-t2904456/page2）;
		 * 下面几句可以设置X轴数据的显示个数
		 * （x轴0-7个数据），当数据点个数小于（29）的时候，缩小到极致hellochart默认的是所有显示。当数据点个数大于（29）的时候，
		 * 若不设置axisX.setMaxLabelChars(int count)这句话,则会自动适配X轴所能显示的尽量合适的数据个数。
		 * 若设置axisX.setMaxLabelChars(int count)这句话, 33个数据点测试，若
		 * axisX.setMaxLabelChars(10);里面的10大于v.right= 7; 里面的7，则
		 * 刚开始X轴显示7条数据，然后缩放的时候X轴的个数会保证大于7小于10 若小于v.right=
		 * 7;中的7,反正我感觉是这两句都好像失效了的样子 - -! 并且Y轴是根据数据的大小自动设置Y轴上限 若这儿不设置 v.right= 7;
		 * 这句话，则图表刚开始就会尽可能的显示所有数据，交互性太差
		 */
		Viewport v = new Viewport(lineChart.getMaximumViewport());
		v.left = 0;
		v.right = 7;
		lineChart.setCurrentViewport(v);
	}

	/**
	 * X 轴的显示
	 */
	private void getAxisXLables() {
		mAxisXValues.clear();
		for (int i = 0; i < day.length; i++) {
			mAxisXValues.add(new AxisValue(i).setLabel(day[i]));
		}
	}

	/**
	 * 图表的每个点的显示
	 */
	private void getAxisPoints() {
		mPointValues.clear();
		for (int i = 0; i < dayInfo.length; i++) {
			PointValue pointValue = new PointValue(i, Float.parseFloat(dayInfo[i].toString()));
			pointValue.setLabel(dayInfo[i] + "");
			mPointValues.add(pointValue);
		}
	}

	/**
	 * 按钮可点击
	 */
	private void whetherTfs() {
		for (int i = 0; i < dayInfo.length; i++) {
			tvList.get(i).setClickable(true);
			tvList.get(i).setTextColor(Color.parseColor("#FFFFFF"));

		}

	}

	/**
	 * 没有数据不可点击
	 */
	private void whetherTf() {
		for (int i = 0; i < dayInfo.length; i++) {
			if (dayInfo[i] == 0.0) {
				tvList.get(i).setClickable(false);
				tvList.get(i).setTextColor(Color.parseColor("#808080"));
			}
		}

	}

	private void whetherTfa() {
		for (int i = 0; i < 31; i++) {
			tvList.get(i).setClickable(false);
			tvList.get(i).setTextColor(Color.parseColor("#808080"));
		}

	}
}
