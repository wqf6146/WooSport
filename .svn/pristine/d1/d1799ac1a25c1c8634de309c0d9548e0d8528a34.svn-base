package com.yhrjkf.woyundong.fragment;

import android.content.Intent;
import android.graphics.Color;
import android.os.Bundle;
import android.os.Handler;
import android.os.Message;
import android.view.View;
import android.view.View.OnClickListener;
import android.widget.ImageView;
import android.widget.LinearLayout;
import android.widget.TextView;

import com.github.mikephil.charting.charts.LineChart;
import com.kaopiz.kprogresshud.KProgressHUD;
import com.prolificinteractive.materialcalendarview.CalendarDay;
import com.prolificinteractive.materialcalendarview.MaterialCalendarView;
import com.prolificinteractive.materialcalendarview.OnMonthChangedListener;
import com.vise.log.ViseLog;
import com.vise.xsnow.net.callback.ApiCallback;
import com.vise.xsnow.net.exception.ApiException;
import com.vise.xsnow.net.mode.CacheResult;
import com.yhrjkf.woyundong.App;
import com.yhrjkf.woyundong.BaseFragment;
import com.yhrjkf.woyundong.R;

import com.yhrjkf.woyundong.bean.VMonthBean;
import com.yhrjkf.woyundong.bean.VMonthSportBean;
import com.yhrjkf.woyundong.http.WooSportApi;

import java.util.ArrayList;

import java.util.List;

import butterknife.Bind;
import lecho.lib.hellocharts.gesture.ZoomType;
import lecho.lib.hellocharts.model.Axis;
import lecho.lib.hellocharts.model.AxisValue;
import lecho.lib.hellocharts.model.Line;
import lecho.lib.hellocharts.model.LineChartData;
import lecho.lib.hellocharts.model.PointValue;
import lecho.lib.hellocharts.model.ValueShape;
import lecho.lib.hellocharts.model.Viewport;
import lecho.lib.hellocharts.view.LineChartView;
public class NewHistoryFragment extends BaseFragment {

	@Bind(R.id.fhn_img_back)
	ImageView mImgBack;

	@Bind(R.id.fhn_calendarView)
	MaterialCalendarView mCalendarView;

	@Bind(R.id.fhn_tv_sporttimes)
	TextView mTvSportTimes;

	@Bind(R.id.fhn_tv_sporthour)
	TextView mTvSportHour;

	@Bind(R.id.fhn_tv_distance)
	TextView mTvSportDistance;

	@Bind(R.id.fhn_tv_carlorie)
	TextView mTvSportCarloris;

	@Bind(R.id.fhn_soprt_chart)
	LineChartView mSportChart;

	@Bind(R.id.fhn_tv_month)
	TextView mTvMonth;

	@Bind(R.id.fhn_tv_charttitle)
	TextView mChartTitle;

	private List<String> mMonthList = new ArrayList<>();
	private Double[] dayInfo;
	private String[] day;
	private List<PointValue> mPointValues = new ArrayList<PointValue>();
	private List<AxisValue> mAxisXValues = new ArrayList<AxisValue>();
	private List<TextView> tvList = new ArrayList<TextView>();

	public static NewHistoryFragment getInstance() {
		NewHistoryFragment fragment = new NewHistoryFragment();
		fragment.setArguments(new Bundle());
		return fragment;
	}

	@Override
	protected int getFragmentLayoutId() {
		return R.layout.fragment_history_new;
	}

	@Override
	protected void initView(View contentView) {

	}

	@Override
	protected void initData() {
//		mTvMonth.setText(mCalendarView.getCurrentDate().getMonth()+1 + "月");
		getMonData();
	}

	boolean mOnceSwitch=true;

	@Override
	protected void bindEvent() {
		mImgBack.setOnClickListener(new OnClickListener() {
			@Override
			public void onClick(View v) {
				pop();
			}
		});

		mCalendarView.setOnMonthChangedListener(new OnMonthChangedListener() {
			@Override
			public void onMonthChanged(MaterialCalendarView widget, CalendarDay date) {
				mTvMonth.setText(date.getMonth() +1 + "月");
				mChartTitle.setText(date.getMonth() +1 +"月份运动折现图");
				if (!mOnceSwitch){
					getDayData(date.getYear()+"-"+String.valueOf(date.getMonth()+1));
				}
				mOnceSwitch=false;

			}
		});

	}

	/**
	 * 获取哪几个月运动了
	 */
	public void getMonData() {

		WooSportApi.getInstance().startGetSportMonth(mContext, String.valueOf(App.newInstance().getUserBean().getId()),
				new ApiCallback<VMonthBean>() {
			@Override
			public void onStart() {
				mHud = KProgressHUD.create(getContext())
						.setStyle(KProgressHUD.Style.SPIN_INDETERMINATE)
						.setLabel("加载中")
						.setCancellable(true);
				mHud.show();
			}

			@Override
			public void onError(ApiException e) {
				ViseLog.e(e);
				showToast("数据获取失败~请重试!");
				mHud.dismiss();
			}

			@Override
			public void onCompleted() {
			}

			@Override
			public void onNext(VMonthBean result) {
				mHud.dismiss();
				if (result !=null && result.getData()!=null ) {
					mCalendarView.setTransverter(result.getData());
					mCalendarView.show();
					mCalendarView.setTileSize(LinearLayout.LayoutParams.MATCH_PARENT);
//					mCalendarView.setTopbarVisible(false);
					mCalendarView.setSelectionColor(getResources().getColor(R.color.bluefont));
					mMonthList = result.getData();
					if (mMonthList.size() > 0)
						getDayData(mMonthList.get(mMonthList.size() - 1));

				}else{
					showToast("无数据！");
				}


			}
		});

	}

	/**
	 * 获取某一个月份运动的数据
	 */

	private void getDayData(String monString) {
		// TODO Auto-generated method stub
		
		WooSportApi.getInstance().startGetSportDay(mContext, String.valueOf(App.newInstance().getUserBean().getId()), monString,
				new ApiCallback<CacheResult<VMonthSportBean>>() {
					@Override
					public void onStart() {
						mHud = KProgressHUD.create(getContext())
								.setStyle(KProgressHUD.Style.SPIN_INDETERMINATE)
								.setLabel("加载中")
								.setCancellable(true);
						mHud.show();
					}

					@Override
					public void onError(ApiException e) {
						ViseLog.e(e);
						mHud.dismiss();
					}

					@Override
					public void onCompleted() {
						mHud.dismiss();
					}

					@Override
					public void onNext(CacheResult<VMonthSportBean> vMonthSportBeanCacheResult) {
						if (vMonthSportBeanCacheResult==null)
							return;
						VMonthSportBean bean = vMonthSportBeanCacheResult.getCacheData();
						mTvSportTimes.setText(String.valueOf(bean.getSum().getCount()));
						mTvSportHour.setText(String.valueOf(bean.getSum().getTime()));
						mTvSportDistance.setText(String.valueOf(bean.getSum().getDistance()));
						mTvSportCarloris.setText(String.valueOf(bean.getSum().getCalorie()));

						dayInfo = new Double[bean.getData().size()];
						day = new String[bean.getData().size()];

						for (int i = 0; i < bean.getData().size(); i++) {
							dayInfo[i] = bean.getData().get(i);
							day[i] = i + 1 + "";
						}
						getAxisXLables();// 获取x轴的标注
						getAxisPoints();// 获取坐标点
						initLineChart();// 初始化

						mHud.dismiss();
					}
				});
	}

	/**
	 * 初始化LineChart的一些设置
	 */
	private void initLineChart() {
		Line line = new Line(mPointValues)
				.setColor(Color.parseColor("#FFCD41")); // 折线的颜色
		List<Line> lines = new ArrayList<Line>();
		line.setShape(ValueShape.CIRCLE);// 折线图上每个数据点的形状 这里是圆形 （有三种
		// ：ValueShape.SQUARE
		// ValueShape.CIRCLE
		// ValueShape.SQUARE）
		line.setCubic(false);// 曲线是否平滑
		line.setStrokeWidth(2);// 线条的粗细，默认是3
		line.setFilled(true);// 是否填充曲线的面积
		line.setHasLabels(true);// 曲线的数据坐标是否加上备注
		// line.setHasLabelsOnlyForSelected(true);//点击数据坐标提示数据（设置了这个line.setHasLabels(true);就无效）
		line.setHasLines(true);// 是否用直线显示。如果为false 则没有曲线只有点显示
		line.setHasPoints(true);// 是否显示圆点 如果为false 则没有原点只有点显示
		lines.add(line);

		LineChartData data = new LineChartData();
		data.setLines(lines);

		// 坐标轴
		Axis axisX = new Axis(); // X轴
		axisX.setHasTiltedLabels(false); // X轴下面坐标轴字体是斜的显示还是直的，true是斜的显示
		// axisX.setTextColor(Color.WHITE); //设置字体颜色
		axisX.setTextColor(Color.parseColor("#D6D6D9"));// 灰色
		// axisX.setName("月度统计表"); // 表格名称
		axisX.setTextSize(11);// 设置字体大小
		axisX.setMaxLabelChars(1); // 最多几个X轴坐标，意思就是你的缩放让X轴上数据的个数7<=x<=mAxisValues.length
		axisX.setValues(mAxisXValues); // 填充X轴的坐标名称
		data.setAxisXBottom(axisX); // x 轴在底部
		// data.setAxisXTop(axisX); //x 轴在顶部

		Axis axisY = new Axis(); // Y轴
		axisY.setName("");// y轴标注
		axisY.setTextSize(11);// 设置字体大小
		data.setAxisYLeft(axisY); // Y轴设置在左边
		axisY.setHasLines(true); // Y轴分割线
		// data.setAxisYRight(axisY); //y轴设置在右边
		// 设置行为属性，支持缩放、滑动以及平移
		mSportChart.setInteractive(true);
		mSportChart.setZoomType(ZoomType.HORIZONTAL); // 缩放类型，水平
		// lineChart.setMaxZoom((float) 3);// 缩放比例
		mSportChart.setMaxZoom((float) 7);
		mSportChart.setLineChartData(data);
		mSportChart.setVisibility(View.VISIBLE);

		/**
		 * 注：下面的7，10只是代表一个数字去类比而已
		 * 尼玛搞的老子好辛苦！！！见（http://forum.xda-developers.com/tools
		 * /programming/library-hellocharts-charting-library-t2904456/page2）;
		 * 下面几句可以设置X轴数据的显示个数
		 * （x轴0-7个数据），当数据点个数小于（29）的时候，缩小到极致hellochart默认的是所有显示。当数据点个数大于（29）的时候，
		 * 若不设置axisX.setMaxLabelChars(int count)这句话,则会自动适配X轴所能显示的尽量合适的数据个数。
		 * 若设置axisX.setMaxLabelChars(int count)这句话, 33个数据点测试，若
		 * axisX.setMaxLabelChars(10);里面的10大于v.right= 7; 里面的7，则
		 * 刚开始X轴显示7条数据，然后缩放的时候X轴的个数会保证大于7小于10 若小于v.right=
		 * 7;中的7,反正我感觉是这两句都好像失效了的样子 - -! 并且Y轴是根据数据的大小自动设置Y轴上限 若这儿不设置 v.right= 7;
		 * 这句话，则图表刚开始就会尽可能的显示所有数据，交互性太差
		 */
		Viewport v = new Viewport(mSportChart.getMaximumViewport());
		v.left = 0;
		v.right = 7;
		mSportChart.setCurrentViewport(v);
	}

	/**
	 * X 轴的显示
	 */
	private void getAxisXLables() {
		mAxisXValues.clear();
		for (int i = 0; i < day.length; i++) {
			mAxisXValues.add(new AxisValue(i).setLabel(day[i]));
		}
	}

	/**
	 * 图表的每个点的显示
	 */
	private void getAxisPoints() {
		mPointValues.clear();
		for (int i = 0; i < dayInfo.length; i++) {
			PointValue pointValue = new PointValue(i, Float.parseFloat(dayInfo[i].toString()));
			pointValue.setLabel(dayInfo[i] + "");
			mPointValues.add(pointValue);
		}
	}

	/**
	 * 按钮可点击
	 */
	private void whetherTfs() {
		for (int i = 0; i < dayInfo.length; i++) {
			tvList.get(i).setClickable(true);
			tvList.get(i).setTextColor(Color.parseColor("#FFFFFF"));

		}

	}

	/**
	 * 没有数据不可点击
	 */
	private void whetherTf() {
		for (int i = 0; i < dayInfo.length; i++) {
			if (dayInfo[i] == 0.0) {
				tvList.get(i).setClickable(false);
				tvList.get(i).setTextColor(Color.parseColor("#808080"));
			}
		}

	}

//	private void whetherTfa() {
//		for (int i = 0; i < 31; i++) {
//			tvList.get(i).setClickable(false);
//			tvList.get(i).setTextColor(Color.parseColor("#808080"));
//		}
//
//	}
}
